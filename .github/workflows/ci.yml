name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate Python syntax
      run: |
        python -m py_compile main.py
        python -m py_compile tools/html_to_markdown.py
        python -m py_compile provider/html_markdown_converter.py

    - name: Test plugin structure
      run: |
        # Test that all required files exist
        test -f manifest.yaml
        test -f main.py
        test -f requirements.txt
        test -f tools/html_to_markdown.py
        test -f tools/html_to_markdown.yaml
        test -f provider/html_markdown_converter.yaml
        echo "All required files present"

    - name: Test imports
      run: |
        # Test that we can at least import basic dependencies
        python -c "
        # Test basic library imports
        import html2text
        import trafilatura
        from bs4 import BeautifulSoup
        from markdownify import markdownify
        import yaml
        print('✅ All required libraries can be imported')
        
        # Test basic file syntax by parsing AST
        import ast
        import sys
        
        files_to_check = [
            'main.py',
            'provider/html_markdown_converter.py', 
            'tools/html_to_markdown.py'
        ]
        
        for file_path in files_to_check:
            try:
                with open(file_path, 'r') as f:
                    content = f.read()
                ast.parse(content)
                print(f'✅ {file_path}: syntax valid')
            except SyntaxError as e:
                print(f'❌ {file_path}: syntax error - {e}')
                sys.exit(1)
            except Exception as e:
                print(f'❌ {file_path}: error - {e}')
                sys.exit(1)
        
        print('✅ All Python files have valid syntax')
        
        # Test that class definitions exist where expected
        with open('provider/html_markdown_converter.py', 'r') as f:
            provider_content = f.read()
            if 'class HtmlMarkdownConverterProvider' not in provider_content:
                print('❌ HtmlMarkdownConverterProvider class not found in provider file')
                sys.exit(1)
            print('✅ Provider class found')
        
        with open('tools/html_to_markdown.py', 'r') as f:
            tool_content = f.read()
            if 'class HtmlToMarkdownTool' not in tool_content:
                print('❌ HtmlToMarkdownTool class not found in tool file')
                sys.exit(1)
            print('✅ Tool class found')
        
        print('✅ Import and syntax tests completed successfully')
        "

    - name: Install Dify CLI
      run: |
        # Install Dify CLI for building packages
        echo "Downloading Dify CLI..."
        curl -L -f https://github.com/langgenius/dify-plugin-daemon/releases/latest/download/dify-plugin-linux-amd64 -o dify
        
        # Verify download was successful
        if [ ! -f dify ]; then
          echo "❌ Failed to download Dify CLI"
          exit 1
        fi
        
        chmod +x dify
        echo "Dify CLI binary info:"
        ls -la dify
        file dify || echo "file command not available"
        
        # Test execution before installation
        echo "Testing binary execution..."
        ./dify --help > /dev/null 2>&1 || echo "⚠️ dify --help failed, but proceeding with installation"
        
        sudo mv dify /usr/local/bin/
        echo "✅ Dify CLI installed successfully"
        which dify

    - name: Test build process
      run: |
        # Test that our build process works
        echo "Starting build process..."
        echo "Current directory: $(pwd)"
        echo "Available files:"
        ls -la
        
        echo "Running make build..."
        make build || (echo "Build failed, checking dify command..." && dify --version && exit 1)
        
        # Verify package was created with reasonable size
        echo "Checking if package was created..."
        test -f dist/html-to-markdown-plugin.difypkg || (echo "Package file not found!" && ls -la dist/ && exit 1)
        
        size=$(stat -f%z dist/html-to-markdown-plugin.difypkg 2>/dev/null || stat -c%s dist/html-to-markdown-plugin.difypkg)
        echo "Package size: $size bytes"
        
        # Package should be under 100KB (we expect ~16KB)
        if [ "$size" -gt 100000 ]; then
          echo "❌ Package too large: $size bytes"
          exit 1
        fi
        echo "✅ Package size acceptable: $size bytes"

    - name: Validate Dify plugin manifest
      run: |
        python -c "
        import yaml
        import sys
        try:
            with open('manifest.yaml', 'r') as f:
                manifest = yaml.safe_load(f)
            required_fields = ['version', 'type', 'name', 'plugins']
            for field in required_fields:
                if field not in manifest:
                    print(f'Missing required field: {field}')
                    sys.exit(1)
            
            # Validate plugin structure
            plugins = manifest.get('plugins', {})
            tools = plugins.get('tools', [])
            if not tools:
                print('No tools defined in manifest')
                sys.exit(1)
            
            print(f'✅ Manifest validation passed for {manifest["name"]} v{manifest["version"]}')
            print(f'✅ Found {len(tools)} tool(s) defined')
            
        except Exception as e:
            print(f'❌ Manifest validation failed: {e}')
            sys.exit(1)
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Security check - validate imports
      run: |
        python -c "
        import ast
        import sys
        
        def check_imports(filename):
            with open(filename, 'r') as f:
                tree = ast.parse(f.read())
            
            imports = []
            for node in ast.walk(tree):
                if isinstance(node, ast.Import):
                    for alias in node.names:
                        imports.append(alias.name)
                elif isinstance(node, ast.ImportFrom):
                    imports.append(node.module)
            
            # Check for potentially dangerous imports
            dangerous = ['os.system', 'subprocess.call', 'eval', 'exec']
            for imp in imports:
                if imp in dangerous:
                    print(f'⚠️  Potentially dangerous import in {filename}: {imp}')
            
            print(f'✅ {filename}: {len(imports)} imports checked')
            return imports
        
        files_to_check = ['main.py', 'tools/html_to_markdown.py', 'provider/html_markdown_converter.py']
        all_imports = []
        for file in files_to_check:
            all_imports.extend(check_imports(file))
        
        print(f'✅ Security check completed. Total imports: {len(set(all_imports))}')
        "

    - name: Check for sensitive data
      run: |
        # Check for potential secrets or sensitive data
        if grep -r "password\|secret\|key\|token" . --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml" --exclude="*.md"; then
          echo "⚠️  Potential sensitive data found - please review"
        else
          echo "✅ No obvious sensitive data found"
        fi
