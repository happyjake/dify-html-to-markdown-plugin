name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: 'v0.1.0'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog generation

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate manifest
      run: |
        python -c "
        import yaml
        with open('manifest.yaml', 'r') as f:
            manifest = yaml.safe_load(f)
        print(f'Plugin: {manifest[\"name\"]} v{manifest[\"version\"]}')
        "

    - name: Install Dify Plugin CLI
      run: |
        # Install Dify CLI using the latest binary release
        curl -L https://github.com/langgenius/dify-plugin-daemon/releases/latest/download/dify-plugin-linux-amd64 -o dify
        chmod +x dify
        # Move to system path for easier access
        sudo mv dify /usr/local/bin/
        # Verify installation
        dify version

    - name: Create plugin package
      run: |
        # Use our make build command which properly packages the plugin
        make build
        # Verify package was created
        ls -la dist/
        # Check package size (should be around 16KB)
        du -h dist/*.difypkg

    - name: Get version and package info
      id: info
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${{ github.event.inputs.version }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
        # Get package size
        PACKAGE_SIZE=$(du -h dist/*.difypkg | cut -f1)
        echo "package_size=$PACKAGE_SIZE" >> $GITHUB_OUTPUT
        echo "Package size: $PACKAGE_SIZE"
        
        # Get manifest info
        PLUGIN_VERSION=$(python -c "import yaml; manifest = yaml.safe_load(open('manifest.yaml')); print(manifest['version'])")
        PLUGIN_NAME=$(python -c "import yaml; manifest = yaml.safe_load(open('manifest.yaml')); print(manifest['name'])")
        echo "plugin_version=$PLUGIN_VERSION" >> $GITHUB_OUTPUT
        echo "plugin_name=$PLUGIN_NAME" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT
        
        if [ -z "$PREV_TAG" ]; then
          echo "This is the first release"
          CHANGELOG="üéâ **Initial Release**"
        else
          echo "Generating changelog from $PREV_TAG to HEAD"
          
          # Generate changelog from commits
          CHANGELOG="## üìã Changes Since $PREV_TAG"$'\n'$'\n'
          
          # Get commits with categories
          FEATURES=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD --grep="feat:" --grep="feature:" | head -10)
          FIXES=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD --grep="fix:" --grep="bugfix:" | head -10)
          IMPROVEMENTS=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD --grep="refactor:" --grep="perf:" --grep="improve:" | head -10)
          DOCS=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD --grep="docs:" --grep="doc:" | head -10)
          CHORES=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD --grep="chore:" --grep="ci:" --grep="build:" | head -10)
          
          if [ ! -z "$FEATURES" ]; then
            CHANGELOG="$CHANGELOG"$'\n'"### ‚ú® New Features"$'\n'"$FEATURES"$'\n'
          fi
          
          if [ ! -z "$FIXES" ]; then
            CHANGELOG="$CHANGELOG"$'\n'"### üêõ Bug Fixes"$'\n'"$FIXES"$'\n'
          fi
          
          if [ ! -z "$IMPROVEMENTS" ]; then
            CHANGELOG="$CHANGELOG"$'\n'"### üîß Improvements"$'\n'"$IMPROVEMENTS"$'\n'
          fi
          
          if [ ! -z "$DOCS" ]; then
            CHANGELOG="$CHANGELOG"$'\n'"### üìö Documentation"$'\n'"$DOCS"$'\n'
          fi
          
          if [ ! -z "$CHORES" ]; then
            CHANGELOG="$CHANGELOG"$'\n'"### üèóÔ∏è Build & CI"$'\n'"$CHORES"$'\n'
          fi
          
          # If no categorized commits, show recent commits
          if [ -z "$FEATURES$FIXES$IMPROVEMENTS$DOCS$CHORES" ]; then
            RECENT_COMMITS=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD | head -5)
            if [ ! -z "$RECENT_COMMITS" ]; then
              CHANGELOG="$CHANGELOG"$'\n'"### üìù Recent Changes"$'\n'"$RECENT_COMMITS"$'\n'
            fi
          fi
        fi
        
        # Save changelog to environment variable and step output
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "Generated changelog:"
        echo "$CHANGELOG"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        tag_name: ${{ steps.info.outputs.version }}
        name: Release ${{ steps.info.outputs.version }}
        body: |
          # üîå Dify HTML to Markdown Converter Plugin ${{ steps.info.outputs.version }}
          
          **Plugin Version**: `${{ steps.info.outputs.plugin_name }}` v${{ steps.info.outputs.plugin_version }}  
          **Package Size**: ${{ steps.info.outputs.package_size }} (optimized from original 16MB)
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## üõ†Ô∏è Available Conversion Methods
          
          | Method | Best For | Output Quality |
          |--------|----------|----------------|
          | **Trafilatura** | Web content extraction | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
          | **Markdownify** | Preserving HTML styling | ‚≠ê‚≠ê‚≠ê‚≠ê |
          | **html2text** | Clean, readable output | ‚≠ê‚≠ê‚≠ê‚≠ê |
          | **Pandoc** | Universal conversion | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
          | **BeautifulSoup** | Custom parsing control | ‚≠ê‚≠ê‚≠ê |
          | **Simple** | Basic fallback | ‚≠ê‚≠ê |
          
          ## üì§ Output Variables
          
          The plugin returns data through Dify's standard output variables:
          - **`json`**: Structured object with `markdown`, `conversion_info`, and `title` fields
          - **`text`**: Formatted text output for direct display
          
          **Usage**: Access individual fields via `json.markdown`, `json.conversion_info`, `json.title`
          
          ## üì¶ Installation
          
          1. Download the `.difypkg` file below
          2. Install it in your Dify instance through the plugin management interface
          3. The plugin will be available as "HTML to Markdown" in your tools
          
          ## üîó Links
          
          - **Repository**: https://github.com/${{ github.repository }}
          - **Issues**: https://github.com/${{ github.repository }}/issues
          - **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.changelog.outputs.prev_tag }}...${{ steps.info.outputs.version }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          dist/html-to-markdown-plugin.difypkg

  docker:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.12-slim
        
        WORKDIR /app
        
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        COPY . .
        
        CMD ["python", "main.py"]
        EOF
    
    - name: Build Docker image
      run: |
        docker build -t html-to-markdown-plugin:${{ steps.version.outputs.version }} .
        docker build -t html-to-markdown-plugin:latest .
