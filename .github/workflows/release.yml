name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: 'v0.1.0'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate manifest
      run: |
        python -c "
        import yaml
        with open('manifest.yaml', 'r') as f:
            manifest = yaml.safe_load(f)
        print(f'Plugin: {manifest[\"name\"]} v{manifest[\"version\"]}')
        "

    - name: Install Dify Plugin CLI
      run: |
        # Install Dify CLI using the latest binary release
        curl -L https://github.com/langgenius/dify-plugin-daemon/releases/latest/download/dify-plugin-linux-amd64 -o dify
        chmod +x dify
        # Move to system path for easier access
        sudo mv dify /usr/local/bin/
        # Verify installation
        dify version

    - name: Create plugin package
      run: |
        # Use our make build command which properly packages the plugin
        make build
        # Verify package was created
        ls -la dist/
        # Check package size (should be around 16KB)
        du -h dist/*.difypkg

    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${{ github.event.inputs.version }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ## What's Changed
          
          Dify HTML to Markdown Converter Plugin release ${{ steps.version.outputs.version }}
          
          ### Features
          - Convert HTML content to Markdown using 6 conversion methods:
            - **Trafilatura**: Best for content extraction from web pages
            - **Markdownify**: Preserves HTML styling and formatting 
            - **html2text**: Clean, readable markdown output
            - **Pandoc**: Universal document converter with advanced features
            - **BeautifulSoup**: Custom parsing with fine-grained control
            - **Simple**: Regex-based fallback for basic conversion
          
          ### Output Format
          The plugin now returns data through Dify's standard output variables:
          - **`json`**: Structured object containing `markdown`, `conversion_info`, and `title` fields
          - **`text`**: Formatted text output for direct display
          
          ### Usage
          1. Access individual fields via `json.markdown`, `json.conversion_info`, `json.title`
          2. Use `text` output for formatted display
          3. Choose conversion method based on your content type and quality requirements
          
          ### Package Size
          Optimized package size: ~16KB (99.9% reduction from original 16MB)
          
          ### Installation
          Download the `.difypkg` file and install it in your Dify instance through the plugin management interface.
          
          **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
        files: |
          dist/html-to-markdown-plugin.difypkg

  docker:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.12-slim
        
        WORKDIR /app
        
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        COPY . .
        
        CMD ["python", "main.py"]
        EOF
    
    - name: Build Docker image
      run: |
        docker build -t html-to-markdown-plugin:${{ steps.version.outputs.version }} .
        docker build -t html-to-markdown-plugin:latest .
