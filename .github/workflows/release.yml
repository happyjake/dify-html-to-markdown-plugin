name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: 'v0.1.0'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install build

    - name: Run tests
      run: |
        python -m pytest test_plugin.py -v

    - name: Validate manifest
      run: |
        python -c "
        import yaml
        with open('manifest.yaml', 'r') as f:
            manifest = yaml.safe_load(f)
        print(f'Plugin: {manifest[\"name\"]} v{manifest[\"version\"]}')
        "

    - name: Create plugin package
      run: |
        # Create a temporary directory for the plugin
        mkdir -p plugin_package
        
        # Copy all necessary files
        cp *.py plugin_package/
        cp *.yaml plugin_package/
        cp requirements.txt plugin_package/
        cp README.md plugin_package/
        cp PRIVACY.md plugin_package/
        
        # Copy tools directory if it exists
        if [ -d "tools" ]; then
          cp -r tools plugin_package/
        fi
        
        # Copy assets directory if it exists
        if [ -d "_assets" ]; then
          cp -r _assets plugin_package/
        fi
        
        # Create the plugin zip
        cd plugin_package
        zip -r ../html-to-markdown-plugin.zip .
        cd ..

    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${{ github.event.inputs.version }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## What's Changed
          
          Dify HTML to Markdown Converter Plugin release ${{ steps.version.outputs.version }}
          
          ### Features
          - Convert HTML content to Markdown using multiple conversion methods
          - Support for Trafilatura, Markdownify, html2text, and Pandoc
          - Configurable conversion options
          
          ### Installation
          Download the plugin package and install it in your Dify instance.
          
          **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ steps.version.outputs.version }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./html-to-markdown-plugin.zip
        asset_name: html-to-markdown-plugin-${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip

  docker:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.12-slim
        
        WORKDIR /app
        
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        COPY . .
        
        CMD ["python", "main.py"]
        EOF
    
    - name: Build Docker image
      run: |
        docker build -t html-to-markdown-plugin:${{ steps.version.outputs.version }} .
        docker build -t html-to-markdown-plugin:latest .
